MODULE SalesOrderInvoice;

REQUIRE SalesOrderConfirmed, 
        InvoiceCurrency, InvoiceDone, InvoiceCanceled;

NAMESPACE Sales;

// type
invoiceType = DATA InvoiceType (OrderType);
nameInvoiceType 'Invoice type' (OrderType t) = name(invoiceType(t));
EXTEND FORM orderType PROPERTIES nameInvoiceType(o);

// invoicing policy
CLASS InvoicingPolicy 'Invoicing policy' {
    ordered 'Ordered quantity'
}
name '{First_name}' (InvoicingPolicy p) = staticCaption(p) IF p IS InvoicingPolicy CHARWIDTH 20;

invoicingPolicy = DATA InvoicingPolicy (OrderType);
nameInvoicingPolicy 'Invoicing policy' (OrderType t) = name(invoicingPolicy(t)); 
EXTEND FORM orderType PROPERTIES nameInvoicingPolicy(o);

// lines
@defineDocLineRelation(order, invoice, '{Order}', 'Invoice', o, i);

invoiced 'Invoiced' (OrderLine ol) = 
    GROUP SUM quantity(InvoiceLine bl) IF orderLine(bl) = ol AND active(invoice(bl));
paid 'Paid' (OrderLine ol) = 
    GROUP SUM quantity(InvoiceLine bl) IF orderLine(bl) = ol AND done(invoice(bl)) AND NOT canceled(invoice(bl));
toInvoiceOrdered 'To bill' (OrderLine l) = 
    max(quantity(l) (-) invoiced(l), 0) 
        IF (invoicingPolicy(type(l)) = InvoicingPolicy.ordered OR NOT invoicingPolicy(type(l)) OR NOT item(l) IS Product);

toInvoiceOrdered (Order o) = GROUP SUM toInvoiceOrdered(OrderLine ol) IF order(ol) = o;

toInvoice = ABSTRACT VALUE BOOLEAN (Order);
toInvoice (Order o) += toInvoiceOrdered(o) > 0;
 
fill ABSTRACT LIST (Invoice, Order);

create (Invoice i, Order o) {
    type(i) <- invoiceType(type(o));    

    company(i) <- company(o);
    
    customer(i) <- customer(o);
    department(i) <- department(o);
    
    currency(i) <- currency(o);
    
    deliveryAddress(i) <- deliveryAddress(o); 
    
    customerReference(i) <- customerReference(o);
    note(i) <- note(o);
    paymentTerms(i) <- paymentTerms(o);
    
    FOR order(OrderLine ol) = o AND toInvoiceOrdered(ol) > 0
        NEW il = InvoiceLine DO {
        orderLine(il) <- ol;
        invoice(il) <- i;
        item(il) <- item(ol);
        description(il) <- description(ol);
        
        quantity(il) <- toInvoiceOrdered(ol);
        
        price(il) <- price(ol);
        discount(il) <- discount(ol);
        discountPrice(il) <- discountPrice(ol);
    }          
                      
    fill(i, o);
    
    executeLocalEvents();
    FOR invoice(InvoiceLine il) = i DO {
        in(il, Tax t) <- in(orderLine(il), t);
    }                                
}

createInvoice 'Create Invoice' (Order o) {
    APPLY;
    IF canceled() THEN RETURN;
               
    NEWSESSION {
        NEW i = Invoice {
            ready(i) <- TRUE;
            
            create(i, o);
            
            SHOW invoice OBJECTS i = i DOCKED;
        }
    }
}

FORM orderInvoiceShow 'Invoiced'
    OBJECTS ol = OrderLine
    
    OBJECTS il = InvoiceLine
    PROPERTIES(il) READONLY number, dateTime, imagedNameStatus, quantity    
    FILTERS orderLine(il) = ol
;

EXTEND FORM order   
    PROPERTIES(o) SHOWIF (status(o) = OrderStatus.confirmed AND toInvoice(o)) createInvoice
    PROPERTIES(l) SHOWIF confirmed(o) invoiced ON CHANGE { DIALOG orderInvoiceShow OBJECTS ol = l; } BACKGROUND NOT invoiced(l) = quantity(l)
    PROPERTIES(l) SHOWIF confirmed(o) paid ON CHANGE { DIALOG orderInvoiceShow OBJECTS ol = l; } BACKGROUND NOT paid(l) = quantity(l)
    
    OBJECTS in = Invoice
    PROPERTIES(in) READONLY number, dateTime, imagedNameStatus BACKGROUND colorStatus(in), nameType    
    PROPERTIES(in) NEWSESSION EDIT GRID   
    FILTERS in(o, in)   
;
 
DESIGN order {
    primaryActions {
        MOVE PROPERTY(createInvoice(o)) FIRST { fontStyle = 'bold'; };
    }
    relatedDoc  {
        MOVE BOX(in) {
            caption = badged('Invoices', countInvoices(o));
            GRID(in) { 
                headerHeight = 24; 
                width = 100; 
                autoSize = TRUE; 
            }
        }
        REMOVE TOOLBARBOX(in);
    }
}

EXTEND FORM orders
    FILTERGROUP toInvoice
        FILTER 'Create Invoice' status(o) = OrderStatus.confirmed AND toInvoice(o)
;

DESIGN orders {
    FILTERGROUP(toInvoice) { alignment = STRETCH; }
}