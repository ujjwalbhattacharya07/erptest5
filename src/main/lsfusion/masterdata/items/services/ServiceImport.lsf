MODULE ServiceImport;

REQUIRE ServiceP, BarCode, System;

NAMESPACE MasterData;

serviceExport 'Export services' () {
    NEWSESSION {
        IF NOT (GROUP SUM 1 IF Service s IS Service) THEN {
            NEW s = Service {
                id(s) <- '123';
                dataName(s) <- 'My service';
                category(s) <- GROUP LAST Category c ORDER DESC c WHERE c IS Category;

                description(s) <- 'Description';
                archived(s) <- TRUE;
            }
        }
    
        LOCAL f = EXCELFILE ();
        EXPORT XLSX HEADER FROM '{ID}' = id(Service s), '{Name}' = dataName(s), 'CategoryID' = idCategory(s), 
            'BarcodeID' = idBarCode(s), 'UoMID' = idUom(s), 'Description' = description(s), 'Archived' = archived(s) WHERE s IS Service TO f;   
        open(f());
    }
}

serviceImport 'Import services' () {
    LOCAL id = STRING[50] (INTEGER);
    LOCAL name = ISTRING[50] (INTEGER);
    LOCAL idCategory = ISTRING[50] (INTEGER);
    LOCAL barCode = STRING (INTEGER);
    LOCAL idUnitM = ISTRING[50] (INTEGER);
    LOCAL description = TEXT (INTEGER);
    LOCAL archived = BOOLEAN (INTEGER);
       
    INPUT f = EXCELFILE DO {
        NEWSESSION {
            IMPORT XLS HEADER FROM f TO id = A, name = B, idCategory = C, barCode = D, idUnitM = E, description = F, archived = G; 
            
            FOR [GROUP SUM 1 BY idCategory(INTEGER i)](num) AND NOT category[STRING](num) DO {
                MESSAGE 'Missing category in database with code' + ' ' + num + '... Import canceled';;
                RETURN;
            }  
            
            FOR imported(INTEGER i) AND (id(i) OR name(i)) DO NEW s = Service {
                id(s) <- id(i);
                dataName(s) <- name(i);
                category(s) <- category(idCategory(i));
                NEW b = BarCode {
                    item(b) <- s;
                    id(b) <- barCode(i);
                }
                uom(s) <- uom(idUnitM(i));
                description(s) <- description(i);
                archived(s) <- archived(i);
            }
            APPLY;
            MESSAGE 'Import completed';
        }
    }    
}

EXTEND FORM migrationData 
    PROPERTIES serviceImport(), serviceExport()
;

DESIGN migrationData {
    commons {
        NEW service {
            horizontal = TRUE;
            caption = 'Services';
            MOVE PROPERTY(serviceImport());
            MOVE PROPERTY(serviceExport());
        }
    }
}
